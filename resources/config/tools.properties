##################
# send result
##################
# Register agent before send results
result.send.register.agent=false

# Number of agents to register
register.agents.count=1

# Sampling rate of registered agent's result configuration
register.agent.result.sampling.rate=1

# first message time in seconds.
# n = 0 => now,
# n < 0 => (now-n sec)
# n > 0 => n seconds from January 1, 1970, 00:00:00 GMT.
result.send.starttime=-30000

# last message time in seconds.
# n = 0 => now,
# n < 0 => (now-n sec)
# n > 0 => n seconds from January 1, 1970, 00:00:00 GMT.
result.send.endtime=0

# Messages count in one sending group
result.send.message.count=60

# Message interval in seconds. Minimum value = 1
result.send.messages.interval=1

# Thread sleep before send a message. 0 means no sleep
result.send.sleep=0

# Type of result message (SINGLE_VALUE_RESULT, INTERVAL_RESULT)
result.type=SINGLE_VALUE_RESULT

# Message source: "random", "file", "stream"
result.send.mode=random

# JSON-formatted input file for message sender
result.send.input.file=

# Task Key
task.key=384

# Name of the agent
result.send.agent.name=221

# Program number for which results will be sent
result.send.program.number=1
	
# Program display name for which results will be sent
result.send.program.display.name=Russia 1



##################
# Copy RRD
##################
# RRD file path to copy data from
rrd.copy.source=
# RRD file path to copy data to
# File will be created. 
# NULL or empty value means that new file will have the same name 
# and old file will be renamed.
rrd.copy.target=
# Sampling rate of new created file. 
# NULL or empty value means that old sampling rate will be used.
rrd.copy.sampling.rate=
# Size of copying batch
rrd.copy.batch.size=604800
# Count of days to store in rrd
rrd.copy.stored.days.count=30

#################
# Merge RRD
################
# Primary RRD file path to merge data from
rrd.merge.source.primary=
# Secondary RRD file path to merge data from
rrd.merge.source.secondary=
# Target RRD file path to merge data to
# File will be created
rrd.merge.target=

##################
#  Results Storm
##################
# number of agents to send results
result.storm.agent.count=5 
# number of tasks for one agent
result.storm.task.count=50
# Send only one result (to initialize queues)
result.storm.register.only=false

##################
#  Alert Storm
##################
# Number of alerts to send
alert.storm.alerts.counts=100
# Number of iterations
alert.storm.iterations.counts=100

# Thread sleep before send an alert. 0 means no sleep
alert.send.sleep=0

# Alert source: "gui", "file", "stream"
alert.send.mode=gui

# JSON-formatted input file for alert sender
alert.send.input.file=

# Default GUI preferences for SendAlert
alert.send.gui.default.action=ACTIVATE
alert.send.gui.default.alert.type=qos.it09a.signalLevel
alert.send.gui.default.source.type=TASK
alert.send.gui.default.source=221.IT09AControlModule.384
alert.send.gui.default.settings=
alert.send.gui.default.perceived.severity=CRITICAL
alert.send.gui.default.specific.reason=NONE

##################
# Start and manage HSQLDB
##################
hsql.dbhome=target/qosdb
hsql.dbname=qosdb
hsql.host=localhost
hsql.port=9001
hsql.username=qos
hsql.password=Tecom1

##################
# CreatePolicyConfiguration
##################
pm.config.file=pm.config


amqp.auto.startup=true
amqp.host=localhost
amqp.port=5672
amqp.username=guest
amqp.password=guest
amqp.qos.service.exchange=qos.service
amqp.qos.result.exchange=qos.result
amqp.qos.alert.exchange=qos.alert
amqp.reply.timeout=60000
# Set expiration time for alarm message in seconds
amqp.qos.alarm.message.expiration.time.in.sec=86400


##################
#  Generate DDL SQL
##################
# path to output directory
ddl.output.directory=./ddl/
# package in which JPA entities reside
ddl.domain.package=com.tecomgroup.qos.domain

##################
#  Register agent
##################
# Whether to register agent with streams or without it
register.agent.generate.streams=true

# number of attempts to send register message
register.agent.attempt.count=5 

# path to a JSON-formatted input file. If blank, sends generated agents info
register.agent.json.path=

# Default email properties for policy action 
register.agent.mail.subject=Threshold was crossed on task ${CURRENT_TASK_KEY}
register.agent.mail.body=<html><meta charset="utf-8"> \
<p>Threshold was crossed at ${CURRENT_TIMESTAMP} with value ${CURRENT_VALUE}.</p> \
<p>--<br/> \
This message was created automatically by Q'ligent Vision Policy Manager.</p> \
</html>

###################
# GrabResults
###################
grab.xml.results=
grab.agent.name=
# YYYYMMDDHHmmss in UTC
grab.start.time=
# YYYYMMDDHHmmss in UTC
grab.end.time=

##################
# Snmp storm
##################
# path to request config file
snmp.requests.config.path=./snmp/requests-example.json
# snmp agent address
snmp.agent.address=localhost
# snmp agent port
snmp.agent.port=161
# snmp agent community
snmp.agent.community=public
# snmp request timeout in milliseconds
snmp.request.timeout.millisec=1500

#################
# RRD to XLSX
################
rrd.to.csv.input.path=
# Start of results if not specified
# Use http://www.epochconverter.com/ to convert human date to timestamp
rrd.to.csv.interval.start=
# End of results if not specified
rrd.to.csv.interval.end=
# Path to output file. If a file with such name exists, new one with digit suffix will be created.
# If not specified, a new file with generated name will be created in the current directory.
rrd.to.csv.output.path=
# timezone in java format. Defaults Europe/Moscow
rrd.to.csv.export.timezone=Europe/Moscow
# size of result interval in seconds that should be proccessed as one chunk (performance tuning)
rrd.to.csv.batch.size=604800
# Whether to write "start of data" and "end of data" labels
rrd.to.csv.start.end.labels=true
